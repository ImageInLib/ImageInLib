#include <windows.h>
#include <stdlib.h>
#include <stdio.h>

#define SKIP_COLOR 0xffffffff

DWORD g_SystemColors[] = {
	0x00c8c8c8,		// 0  COLOR_SCROLLBAR      
	0x00000000,		// 1  COLOR_BACKGROUND     
	SKIP_COLOR,		// 2  COLOR_ACTIVECAPTION (0x00d1b499)
	SKIP_COLOR,		// 3  COLOR_INACTIVECAPTION	(0x00dbcdbf)
	0x00f0f0f0,		// 4  COLOR_MENU           
	0x00ffffff,		// 5  COLOR_WINDOW         
	SKIP_COLOR,		// 6  COLOR_WINDOWFRAME	(0x00646464)
	0x00000000,		// 7  COLOR_MENUTEXT       
	0x00000000,		// 8  COLOR_WINDOWTEXT     
	SKIP_COLOR,		// 9  COLOR_CAPTIONTEXT	(0x00000000) 
	SKIP_COLOR,		// 10 COLOR_ACTIVEBORDER (0x00b4b4b4) 
	SKIP_COLOR,		// 11 COLOR_INACTIVEBORDER (0x00fcf7f4)
	0x00ababab,		// 12 COLOR_APPWORKSPACE  
	0x00ff9933,		// 13 COLOR_HIGHLIGHT     
	0x00ffffff,		// 14 COLOR_HIGHLIGHTTEXT 
	0x00f0f0f0,		// 15 COLOR_BTNFACE       
	0x00a0a0a0,		// 16 COLOR_BTNSHADOW     
	0x00808080,		// 17 COLOR_GRAYTEXT      
	0x00000000,		// 18 COLOR_BTNTEXT       
	SKIP_COLOR,		// 19 COLOR_INACTIVECAPTIONTEXT	(0x00544e43) 
	0x00ffffff,		// 20 COLOR_BTNHIGHLIGHT
	0x00696969,		// 21 COLOR_3DDKSHADOW  
	0x00e3e3e3,		// 22 COLOR_3DLIGHT     
	0x00000000,		// 23 COLOR_INFOTEXT    
	0x00e1ffff,		// 24 COLOR_INFOBK      
	SKIP_COLOR,		// 25 --- (0x00000000)
	0x00cc6600,		// 26 COLOR_HOTLIGHT    
	SKIP_COLOR,		// 27 COLOR_GRADIENTACTIVECAPTION (0x00ead1b9)
	SKIP_COLOR,		// 28 COLOR_GRADIENTINACTIVECAPTION	(0x00f2e4d7)
	0x00ff9933,		// 29 COLOR_MENUHILIGHT 
	0x00f0f0f0		// 30 COLOR_MENUBAR     
};

const char * g_SystemColorNames[] = {
    "COLOR_SCROLLBAR",
    "COLOR_BACKGROUND",
    "COLOR_ACTIVECAPTION",
    "COLOR_INACTIVECAPTION",
    "COLOR_MENU",
    "COLOR_WINDOW",
    "COLOR_WINDOWFRAME",
    "COLOR_MENUTEXT",
    "COLOR_WINDOWTEXT",
    "COLOR_CAPTIONTEXT",
    "COLOR_ACTIVEBORDER",
    "COLOR_INACTIVEBORDER",
    "COLOR_APPWORKSPACE",
    "COLOR_HIGHLIGHT",
    "COLOR_HIGHLIGHTTEXT",
    "COLOR_BTNFACE",
    "COLOR_BTNSHADOW",
    "COLOR_GRAYTEXT",
    "COLOR_BTNTEXT",
    "COLOR_INACTIVECAPTIONTEXT",
    "COLOR_BTNHIGHLIGHT",
    "COLOR_3DDKSHADOW",
    "COLOR_3DLIGHT",
    "COLOR_INFOTEXT",
    "COLOR_INFOBK",
    "---",
    "COLOR_HOTLIGHT",
    "COLOR_GRADIENTACTIVECAPTION",
    "COLOR_GRADIENTINACTIVECAPTION",
    "COLOR_MENUHILIGHT",
    "COLOR_MENUBAR"
};


int SM_Defaults[] = 
{
	1280,	// 0  SM_CXSCREEN:			//0
	1024,	// 1  SM_CYSCREEN:			//1
	17,		// 2  SM_CXVSCROLL:			//2
	17,		// 3  SM_CYHSCROLL:			//3
	20,		// 4  SM_CYCAPTION:			//4
	1,		// 5  SM_CXBORDER:			//5
	1,		// 6  SM_CYBORDER:			//6
	3,		// 7  SM_CXDLGFRAME:		//7
	3,		// 8  SM_CYDLGFRAME:		//8
	17,		// 9  SM_CYVTHUMB:			//9
	17,		// 10 SM_CXHTHUMB:			//10
	32,		// 11 SM_CXICON:			//11
	32,		// 12 SM_CYICON:			//12
	32,		// 13 SM_CXCURSOR:			//13
	32,		// 14 SM_CYCURSOR:			//14
	20,		// 15 SM_CYMENU:			//15
	1280,	// 16 SM_CXFULLSCREEN:		//16
	974,	// 17 SM_CYFULLSCREEN:		//17
	0,		// 18 SM_CYKANJIWINDOW:		//18
	1,		// 19 SM_MOUSEPRESENT:		//19
	17,		// 20 SM_CYVSCROLL:			//20
	17,		// 21 SM_CXHSCROLL:			//21
	0,		// 22 SM_DEBUG:				//22
	0,		// 23 SM_SWAPBUTTON:		//23
	0,		// 24 SM_RESERVED1:			//24
	0,		// 25 SM_RESERVED2:			//25
	0,		// 26 SM_RESERVED3:			//26
	0,		// 27 SM_RESERVED4:			//27
	124,	// 28 SM_CXMIN:				//28
	36,		// 29 SM_CYMIN:				//29
	32,		// 30 SM_CXSIZE:			//30
	19,		// 31 SM_CYSIZE:			//31
	8,		// 32 SM_CXFRAME:			//32
	8,		// 33 SM_CYFRAME:			//33
	124,	// 34 SM_CXMINTRACK:		//34
	36,		// 35 SM_CYMINTRACK:		//35
	4,		// 36 SM_CXDOUBLECLK:		//36
	4,		// 37 SM_CYDOUBLECLK:		//37
	75,		// 38 SM_CXICONSPACING:		//38
	75,		// 39 SM_CYICONSPACING:		//39
	0,		// 40 SM_MENUDROPALIGNMENT:	//40
	0,		// 41 SM_PENWINDOWS:		//41
	0,		// 42 SM_DBCSENABLED:		//42
	3,		// 43 SM_CMOUSEBUTTONS:		//43
	0,		// 44 SM_SECURE:			//44
	2,		// 45 SM_CXEDGE:			//45
	2,		// 46 SM_CYEDGE:			//46
	160,	// 47 SM_CXMINSPACING:		//47
	25,		// 48 SM_CYMINSPACING:		//48
	16,		// 49 SM_CXSMICON:			//49
	16,		// 50 SM_CYSMICON:			//50
	18,		// 51 SM_CYSMCAPTION:		//51
	17,		// 52 SM_CXSMSIZE:			//52
	17,		// 53 SM_CYSMSIZE:			//53
	19,		// 54 SM_CXMENUSIZE:		//54
	19,		// 55 SM_CYMENUSIZE:		//55
	8,		// 56 SM_ARRANGE:			//56
	160,	// 57 SM_CXMINIMIZED:		//57
	25,		// 58 SM_CYMINIMIZED:		//58
	2572,	// 59 SM_CXMAXTRACK:		//59
	1036,	// 60 SM_CYMAXTRACK:		//60
	1296,	// 61 SM_CXMAXIMIZED:		//61
	1010,	// 62 SM_CYMAXIMIZED:		//62
	3,		// 63 SM_NETWORK:			//63
	0,		// 64 
	0,		// 65 
	0,		// 66 
	0,		// 67 SM_CLEANBOOT:			//67
	4,		// 68 SM_CXDRAG:			//68
	4,		// 69 SM_CYDRAG:			//69
	0,		// 70 SM_SHOWSOUNDS:		//70
	15,		// 71 SM_CXMENUCHECK:		//71
	15,		// 72 SM_CYMENUCHECK:		//72
	0,		// 73 SM_SLOWMACHINE:		//73
	0,		// 74 SM_MIDEASTENABLED:	//74
	1,		// 75 SM_MOUSEWHEELPRESENT:	//75
	0,		// 76 SM_XVIRTUALSCREEN:	//76
	0,		// 77 SM_YVIRTUALSCREEN:	//77
	2560,	// 78 SM_CXVIRTUALSCREEN:	//78
	1024,	// 79 SM_CYVIRTUALSCREEN:	//79
	2,		// 80 SM_CMONITORS:			//80
	1,		// 81 SM_SAMEDISPLAYFORMAT:	//81
	1,		// 82 SM_IMMENABLED:		//82
	1,		// 83 SM_CXFOCUSBORDER:		//83
	1,		// 84 SM_CYFOCUSBORDER:		//84
	4,		// 85
	0,		// 86 SM_TABLETPC:			//86
	0,		// 87 SM_MEDIACENTER:		//87
	0,		// 88 SM_STARTER:			//88
	0,		// 89 SM_SERVERR2:			//89						
	1,		// 90 
	0,		// 91 SM_MOUSEHORIZONTALWHEELPRESENT:	//91
	0		// 92 SM_CXPADDEDBORDER:	//92
	0,
	0,
	0,
};

const char* SM_DefaultsNames[] = 
{
	"SM_CXSCREEN",
	"SM_CYSCREEN",
	"SM_CXVSCROLL",			
	"SM_CYHSCROLL",			
	"SM_CYCAPTION",			
	"SM_CXBORDER",			
	"SM_CYBORDER",			
	"SM_CXDLGFRAME",		
	"SM_CYDLGFRAME",		
	"SM_CYVTHUMB",		
	"SM_CXHTHUMB",		
	"SM_CXICON",			
	"SM_CYICON",			
	"SM_CXCURSOR",		
	"SM_CYCURSOR",		
	"SM_CYMENU",			
	"SM_CXFULLSCREEN",	
	"SM_CYFULLSCREEN",	
	"SM_CYKANJIWINDOW",	
	"SM_MOUSEPRESENT",	
	"SM_CYVSCROLL",		
	"SM_CXHSCROLL",		
	"SM_DEBUG",			
	"SM_SWAPBUTTON",		
	"SM_RESERVED1",		
	"SM_RESERVED2",		
	"SM_RESERVED3",		
	"SM_RESERVED4",		
	"SM_CXMIN",			
	"SM_CYMIN",			
	"SM_CXSIZE",			
	"SM_CYSIZE",			
	"SM_CXFRAME",		
	"SM_CYFRAME",		
	"SM_CXMINTRACK",		
	"SM_CYMINTRACK",		
	"SM_CXDOUBLECLK",	
	"SM_CYDOUBLECLK",	
	"SM_CXICONSPACING",	
	"SM_CYICONSPACING",	
	"SM_MENUDROPALIGNMENT",	
	"SM_PENWINDOWS",		
	"SM_DBCSENABLED",	
	"SM_CMOUSEBUTTONS",	
	"SM_SECURE",			
	"SM_CXEDGE",			
	"SM_CYEDGE",			
	"SM_CXMINSPACING",	
	"SM_CYMINSPACING",	
	"SM_CXSMICON",		
	"SM_CYSMICON",		
	"SM_CYSMCAPTION",	
	"SM_CXSMSIZE",		
	"SM_CYSMSIZE",		
	"SM_CXMENUSIZE",		
	"SM_CYMENUSIZE",		
	"SM_ARRANGE",		
	"SM_CXMINIMIZED",	
	"SM_CYMINIMIZED",	
	"SM_CXMAXTRACK",		
	"SM_CYMAXTRACK",		
	"SM_CXMAXIMIZED",	
	"SM_CYMAXIMIZED",	
	"SM_NETWORK",		
	"",
	"",
	"",
	"SM_CLEANBOOT",		
	"SM_CXDRAG",			
	"SM_CYDRAG",			
	"SM_SHOWSOUNDS",		
	"SM_CXMENUCHECK",	
	"SM_CYMENUCHECK",	
	"SM_SLOWMACHINE",	
	"SM_MIDEASTENABLED",	
	"SM_MOUSEWHEELPRESENT",	
	"SM_XVIRTUALSCREEN",
	"SM_YVIRTUALSCREEN",
	"SM_CXVIRTUALSCREEN",	
	"SM_CYVIRTUALSCREEN",	
	"SM_CMONITORS",			
	"SM_SAMEDISPLAYFORMAT",	
	"SM_IMMENABLED",
	"SM_CXFOCUSBORDER",		
	"SM_CYFOCUSBORDER",		
	"",
	"SM_TABLETPC",			
	"SM_MEDIACENTER",		
	"SM_STARTER",			
	"SM_SERVERR2",
	"",
	"SM_MOUSEHORIZONTALWHEELPRESENT",
	"SM_CXPADDEDBORDER",
	"",
	"SM_DIGITIZER",
	"SM_MAXIMUMTOUCHES"
};


void main(void)
{		
	printf(
		"#define SKIP_COLOR 0xffffffff\n"
		"\n"
		"DWORD g_SystemColors[] = {\n"
	);
	for (int i = 0; i < _countof(g_SystemColors); i++)
	{
		DWORD dwColor = GetSysColor(i);
		if (g_SystemColors[i] != SKIP_COLOR)
		{
			printf("\t0x%08x%c \t//%-2d %s\n",
				dwColor, i != _countof(g_SystemColors)-1 ? ',':' ', i, g_SystemColorNames[i]);
		}
		else
		{
			printf("\tSKIP_COLOR%c \t//%-2d %s (0x%08x)\n",
				i != _countof(g_SystemColors)-1 ? ',':' ', i, g_SystemColorNames[i], dwColor);
		}
	}
	printf("};\n");

	printf("\n");
	printf(
		"int SM_Defaults[] =\n"
		"{\n");
	for (int i = 0; i < _countof(SM_Defaults); i++)
	{
		int nMetric = GetSystemMetrics(i);
		printf("\t%d%c  \t//%-2d %s\n",
			nMetric, i != _countof(SM_Defaults)-1 ? ',':' ', i, SM_DefaultsNames[i]);
	}
	printf("};\n");

}
