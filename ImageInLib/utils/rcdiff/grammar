
/*  A Bison parser, made from grammar.ypp with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	DEFINE_DIRECTIVE	258
#define	ELIF_DIRECTIVE	259
#define	ELSE_DIRECTIVE	260
#define	ENDIF_DIRECTIVE	261
#define	IF_DIRECTIVE	262
#define	IFDEF_DIRECTIVE	263
#define	IFNDEF_DIRECTIVE	264
#define	INCLUDE_DIRECTIVE	265
#define	PRAGMA_DIRECTIVE	266
#define	UNDEF_DIRECTIVE	267
#define	DIRECTIVE_PARAM	268
#define	DIRECTIVE_END	269
#define	IDENTIFIER	270
#define	CONSTANT	271
#define	STRING	272
#define	BLOCK_BEGIN	273
#define	BLOCK_END	274
#define	STM_ACCELERATORS	275
#define	STM_BITMAP	276
#define	STM_CURSOR	277
#define	STM_DIALOG	278
#define	STM_DIALOGEX	279
#define	STM_FONT	280
#define	STM_ICON	281
#define	STM_MENU	282
#define	STM_MENUEX	283
#define	STM_MESSAGETABLE	284
#define	STM_RCDATA	285
#define	STM_STRINGTABLE	286
#define	STM_VERSIONINFO	287
#define	STM_LANGUAGE	288
#define	STM_TOOLBAR	289
#define	DESIGNINFO	290
#define	DLGINIT	291
#define	AUTO3STATE	292
#define	AUTOCHECKBOX	293
#define	AUTORADIOBUTTON	294
#define	CHECKBOX	295
#define	COMBOBOX	296
#define	CONTROL	297
#define	CTEXT	298
#define	DEFPUSHBUTTON	299
#define	EDITTEXT	300
#define	GROUPBOX	301
#define	LISTBOX	302
#define	LTEXT	303
#define	PUSHBOX	304
#define	POPUP	305
#define	PUSHBUTTON	306
#define	RADIOBUTTON	307
#define	RTEXT	308
#define	SCROLLBAR	309
#define	STATE3	310
#define	MENUITEM	311
#define	BLOCK	312
#define	VALUE	313
#define	SEPARATOR	314
#define	MFTSEPARATOR	315
#define	BUTTON	316
#define	RIGHT_OP	317
#define	LEFT_OP	318
#define	AND_OP	319
#define	OR_OP	320
#define	LE_OP	321
#define	GE_OP	322
#define	EQ_OP	323
#define	NE_OP	324
#define	NOT_OP	325
#define	MOVEABLE_FLAG	326
#define	FIXED_FLAG	327
#define	PURE_FLAG	328
#define	IMPURE_FLAG	329
#define	PRELOAD_FLAG	330
#define	LOADONCALL_FLAG	331
#define	DISCARDABLE_FLAG	332
#define	SCANERR	333

#line 10 "grammar.ypp"


#include "headers.h"
#include "grammar.h"
#include "parse.h"
#include "rcfile.h"
#include "malloc.h"

extern wchar_t *yytext;
extern int yylex(int *yylval, void *yyinput);

#ifdef _DEBUG
#define YYDEBUG 1
#define YYERROR_VERBOSE
#endif


#define YYPURE 1
#define YYLEX_PARAM yyparam
#define YYPARSE_PARAM yyparam
#define state ((yy_parse_state*)yyparam)
#define yyerror(msg) parseError((yy_parse_state*)yyparam, (msg))


#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#ifndef YYSTYPE
#define YYSTYPE int
#endif
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		420
#define	YYFLAG		-32768
#define	YYNTBASE	85

#define YYTRANSLATE(x) ((unsigned)(x) <= 333 ? yytranslate[x] : 158)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,    79,     2,     2,     2,    80,
    81,     2,     2,    82,     2,    84,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,    83,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     3,     5,     7,     9,    11,    13,    15,    17,    19,
    21,    23,    25,    27,    29,    31,    33,    34,    36,    38,
    40,    42,    44,    46,    48,    49,    52,    54,    56,    58,
    60,    62,    64,    66,    68,    70,    72,    74,    76,    78,
    80,    82,    84,    86,    88,    90,    92,    94,    96,    98,
   100,   102,   104,   106,   108,   110,   112,   114,   116,   118,
   120,   122,   124,   126,   128,   130,   132,   134,   136,   138,
   140,   142,   144,   146,   148,   150,   152,   154,   156,   158,
   160,   162,   164,   166,   168,   170,   172,   174,   176,   178,
   180,   182,   184,   186,   188,   190,   192,   194,   196,   198,
   200,   202,   204,   206,   208,   210,   212,   214,   216,   218,
   220,   222,   224,   226,   228,   230,   232,   234,   236,   238,
   240,   242,   244,   246,   248,   250,   252,   254,   256,   258,
   260,   262,   264,   266,   268,   270,   272,   274,   280,   282,
   284,   286,   288,   290,   291,   294,   295,   298,   300,   302,
   304,   308,   310,   313,   317,   319,   321,   322,   331,   332,
   335,   339,   341,   346,   351,   356,   361,   365,   366,   373,
   374,   383,   385,   387,   388,   391,   393,   397,   402,   407,
   412,   417,   420,   425,   430,   435,   438,   443,   446,   449,
   454,   459,   464,   469,   474,   477,   482,   484,   486,   488,
   490,   494,   499,   503,   508,   512,   515,   517,   522,   529,
   531,   533,   535,   537,   539,   546,   547,   555,   556,   561,
   562,   571,   573,   575,   576,   579,   584,   591,   594,   599,
   602,   607,   608,   615,   616,   625,   626,   637,   639,   641,
   643,   647,   652,   656,   661,   665,   668,   670,   671,   679,
   680,   683,   686,   688,   690,   691,   700,   701,   704,   709,
   710,   717,   719,   723,   725,   726,   735,   736,   739,   742,
   744
};

static const short yyrhs[] = {    85,
    86,     0,    87,     0,   102,     0,   105,     0,   109,     0,
   110,     0,   114,     0,   124,     0,   126,     0,   129,     0,
   112,     0,   111,     0,   140,     0,   146,     0,   153,     0,
   157,     0,     0,    71,     0,    72,     0,    73,     0,    74,
     0,    75,     0,    76,     0,    77,     0,     0,    89,    88,
     0,    20,     0,    21,     0,    22,     0,    23,     0,    24,
     0,    25,     0,    26,     0,    27,     0,    28,     0,    29,
     0,    30,     0,    31,     0,    32,     0,    33,     0,    37,
     0,    38,     0,    39,     0,    40,     0,    41,     0,    42,
     0,    43,     0,    44,     0,    45,     0,    46,     0,    47,
     0,    48,     0,    49,     0,    50,     0,    51,     0,    52,
     0,    53,     0,    54,     0,    55,     0,    56,     0,    57,
     0,    58,     0,    34,     0,    59,     0,    60,     0,    61,
     0,    35,     0,    36,     0,    20,     0,    21,     0,    22,
     0,    23,     0,    24,     0,    25,     0,    26,     0,    27,
     0,    28,     0,    29,     0,    30,     0,    32,     0,    37,
     0,    38,     0,    39,     0,    40,     0,    41,     0,    42,
     0,    43,     0,    44,     0,    45,     0,    46,     0,    47,
     0,    48,     0,    49,     0,    50,     0,    51,     0,    52,
     0,    53,     0,    54,     0,    55,     0,    56,     0,    57,
     0,    58,     0,    34,     0,    59,     0,    60,     0,    61,
     0,    35,     0,    36,     0,    37,     0,    38,     0,    39,
     0,    40,     0,    41,     0,    42,     0,    43,     0,    44,
     0,    45,     0,    46,     0,    47,     0,    48,     0,    49,
     0,    50,     0,    51,     0,    52,     0,    53,     0,    54,
     0,    55,     0,    56,     0,    57,     0,    58,     0,    59,
     0,    61,     0,    90,     0,    15,     0,    17,     0,    16,
     0,    95,     0,    95,    79,    80,    96,    81,     0,    91,
     0,    15,     0,    17,     0,    16,     0,    93,     0,     0,
    98,    99,     0,     0,    99,   100,     0,    82,     0,    83,
     0,    93,     0,   101,    84,    93,     0,    93,     0,    33,
   103,     0,   104,    82,   104,     0,    15,     0,    16,     0,
     0,    94,    20,    89,    97,   106,    18,   107,    19,     0,
     0,   107,   108,     0,   108,    82,    93,     0,    93,     0,
    94,    21,    89,   101,     0,    94,    22,    89,   101,     0,
    94,    25,    89,   101,     0,    94,    26,    89,   101,     0,
    94,    30,   101,     0,     0,    94,    30,   113,    18,    97,
    19,     0,     0,    94,   116,    89,    97,   115,    18,   117,
    19,     0,    23,     0,    24,     0,     0,   117,   118,     0,
   119,     0,   119,    82,   123,     0,    37,   121,    82,   122,
     0,    38,   121,    82,   122,     0,    39,   121,    82,   122,
     0,    40,   121,    82,   122,     0,    41,   122,     0,    42,
   120,    82,   122,     0,    43,   121,    82,   122,     0,    44,
   121,    82,   122,     0,    45,   122,     0,    46,   121,    82,
   122,     0,    26,   122,     0,    47,   122,     0,    48,   121,
    82,   122,     0,    49,   121,    82,   122,     0,    51,   121,
    82,   122,     0,    52,   121,    82,   122,     0,    53,   121,
    82,   122,     0,    54,   122,     0,    55,   121,    82,   122,
     0,    93,     0,    17,     0,    16,     0,    93,     0,   123,
    82,    93,     0,   123,    82,    70,    93,     0,   123,    83,
    93,     0,   123,    83,    70,    93,     0,   123,    70,    93,
     0,    70,    93,     0,    93,     0,    94,   125,    89,   101,
     0,    94,   125,    89,    18,    97,    19,     0,    92,     0,
    33,     0,    17,     0,    15,     0,    16,     0,    94,    35,
    89,    18,   127,    19,     0,     0,   127,    93,    82,    23,
    18,   128,    19,     0,     0,   128,    15,    82,    16,     0,
     0,    94,   131,    89,    97,   130,    18,   132,    19,     0,
    27,     0,    28,     0,     0,   132,   133,     0,    56,   137,
    82,   138,     0,    56,   137,    82,   138,    82,   139,     0,
    56,    60,     0,    56,    60,    82,   139,     0,    56,    59,
     0,    56,    59,    82,   139,     0,     0,    50,   137,   134,
    18,   132,    19,     0,     0,    50,   137,    82,   138,   135,
    18,   132,    19,     0,     0,    50,   137,    82,   138,    82,
   139,   136,    18,   132,    19,     0,    17,     0,    16,     0,
    93,     0,   139,    82,    93,     0,   139,    82,    70,    93,
     0,   139,    83,    93,     0,   139,    83,    70,    93,     0,
   139,    70,    93,     0,    70,    93,     0,    93,     0,     0,
    31,    89,    97,   141,    18,   142,    19,     0,     0,   142,
   143,     0,   145,   144,     0,    17,     0,    93,     0,     0,
    94,    32,    89,    97,   147,    18,   148,    19,     0,     0,
   148,   149,     0,    58,   151,    82,   152,     0,     0,    57,
   151,   150,    18,   148,    19,     0,    93,     0,   152,    82,
    93,     0,    93,     0,     0,    94,    34,    89,    97,   154,
    18,   155,    19,     0,     0,   155,   156,     0,    61,    93,
     0,    59,     0,    94,    36,    89,    18,    97,    19,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
    73,    74,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    95,    99,   100,   101,
   102,   103,   104,   105,   109,   110,   114,   114,   114,   114,
   114,   115,   115,   115,   115,   115,   116,   116,   116,   116,
   117,   117,   117,   117,   117,   118,   118,   118,   118,   118,
   118,   118,   119,   119,   119,   119,   119,   119,   119,   120,
   120,   120,   120,   120,   120,   120,   121,   121,   125,   125,
   125,   125,   125,   126,   126,   126,   126,   126,   127,   127,
   128,   128,   128,   128,   128,   129,   129,   129,   129,   129,
   129,   129,   130,   130,   130,   130,   130,   130,   130,   131,
   131,   131,   131,   131,   131,   131,   132,   132,   136,   136,
   136,   136,   136,   137,   137,   137,   137,   137,   137,   137,
   138,   138,   138,   138,   138,   138,   138,   139,   139,   139,
   139,   139,   143,   144,   145,   146,   150,   151,   155,   157,
   159,   161,   166,   175,   178,   181,   182,   186,   190,   194,
   202,   207,   218,   222,   226,   227,   235,   242,   247,   248,
   256,   261,   272,   285,   298,   311,   324,   331,   338,   350,
   357,   362,   366,   373,   374,   383,   388,   396,   398,   400,
   402,   404,   406,   408,   410,   412,   414,   416,   418,   420,
   422,   424,   426,   428,   430,   432,   437,   442,   444,   449,
   454,   459,   464,   469,   474,   479,   484,   495,   502,   512,
   516,   520,   524,   528,   539,   546,   547,   554,   555,   564,
   572,   577,   578,   582,   583,   587,   595,   603,   611,   619,
   627,   635,   645,   650,   660,   665,   675,   683,   685,   690,
   695,   700,   705,   710,   715,   720,   725,   736,   744,   748,
   749,   753,   760,   765,   774,   782,   787,   788,   792,   802,
   812,   820,   825,   830,   841,   847,   851,   852,   856,   863,
   874
};

static const char * const yytname[] = {   "$","error","$undefined.","DEFINE_DIRECTIVE",
"ELIF_DIRECTIVE","ELSE_DIRECTIVE","ENDIF_DIRECTIVE","IF_DIRECTIVE","IFDEF_DIRECTIVE",
"IFNDEF_DIRECTIVE","INCLUDE_DIRECTIVE","PRAGMA_DIRECTIVE","UNDEF_DIRECTIVE",
"DIRECTIVE_PARAM","DIRECTIVE_END","IDENTIFIER","CONSTANT","STRING","BLOCK_BEGIN",
"BLOCK_END","STM_ACCELERATORS","STM_BITMAP","STM_CURSOR","STM_DIALOG","STM_DIALOGEX",
"STM_FONT","STM_ICON","STM_MENU","STM_MENUEX","STM_MESSAGETABLE","STM_RCDATA",
"STM_STRINGTABLE","STM_VERSIONINFO","STM_LANGUAGE","STM_TOOLBAR","DESIGNINFO",
"DLGINIT","AUTO3STATE","AUTOCHECKBOX","AUTORADIOBUTTON","CHECKBOX","COMBOBOX",
"CONTROL","CTEXT","DEFPUSHBUTTON","EDITTEXT","GROUPBOX","LISTBOX","LTEXT","PUSHBOX",
"POPUP","PUSHBUTTON","RADIOBUTTON","RTEXT","SCROLLBAR","STATE3","MENUITEM","BLOCK",
"VALUE","SEPARATOR","MFTSEPARATOR","BUTTON","RIGHT_OP","LEFT_OP","AND_OP","OR_OP",
"LE_OP","GE_OP","EQ_OP","NE_OP","NOT_OP","MOVEABLE_FLAG","FIXED_FLAG","PURE_FLAG",
"IMPURE_FLAG","PRELOAD_FLAG","LOADONCALL_FLAG","DISCARDABLE_FLAG","SCANERR",
"'$'","'('","')'","','","'|'","'.'","rc_file","statement","end_of_input","memory_flag",
"memory_flags","tokens","tokens1","controls","id","resource_name","resource_name_base",
"resource_name_condition","resource_options","@1","resource_options_list","resource_options_list_item",
"filename","languageStatement","language_def","language_param","acceleratorsStatement",
"@2","accelerators","accelerator","bitmapStatement","cursorStatement","fontStatement",
"rcdataStatement","@3","dialogStatement","@4","dialog_type","controls_list",
"control","control_type","control_id_text","control_text","control_id","control_options",
"userdefStatement","userdef_type","designinfoStatement","designinfo","designinfo_pos",
"menuStatement","@5","menu_type","menuitems","menuitem","@6","@7","@8","menuitem_text",
"menuitem_id","menuitem_options","stringtableStatement","@9","strings","string",
"string_text","string_id","versioninfoStatement","@10","versioninfos","versioninfo",
"@11","versioninfo_id","versioninfo_text","toolbarStatement","@12","toolbar_items",
"toolbar_item","dlginitStatement",""
};
#endif

static const short yyr1[] = {     0,
    85,    85,    86,    86,    86,    86,    86,    86,    86,    86,
    86,    86,    86,    86,    86,    86,    87,    88,    88,    88,
    88,    88,    88,    88,    89,    89,    90,    90,    90,    90,
    90,    90,    90,    90,    90,    90,    90,    90,    90,    90,
    90,    90,    90,    90,    90,    90,    90,    90,    90,    90,
    90,    90,    90,    90,    90,    90,    90,    90,    90,    90,
    90,    90,    90,    90,    90,    90,    90,    90,    91,    91,
    91,    91,    91,    91,    91,    91,    91,    91,    91,    91,
    91,    91,    91,    91,    91,    91,    91,    91,    91,    91,
    91,    91,    91,    91,    91,    91,    91,    91,    91,    91,
    91,    91,    91,    91,    91,    91,    91,    91,    92,    92,
    92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
    92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
    92,    92,    93,    93,    93,    93,    94,    94,    95,    95,
    95,    95,    96,    98,    97,    99,    99,   100,   100,   100,
   101,   101,   102,   103,   104,   104,   106,   105,   107,   107,
   108,   108,   109,   110,   111,   110,   112,   113,   112,   115,
   114,   116,   116,   117,   117,   118,   118,   119,   119,   119,
   119,   119,   119,   119,   119,   119,   119,   119,   119,   119,
   119,   119,   119,   119,   119,   119,   120,   121,   121,   122,
   123,   123,   123,   123,   123,   123,   123,   124,   124,   125,
   125,   125,   125,   125,   126,   127,   127,   128,   128,   130,
   129,   131,   131,   132,   132,   133,   133,   133,   133,   133,
   133,   134,   133,   135,   133,   136,   133,   137,   137,   138,
   139,   139,   139,   139,   139,   139,   139,   141,   140,   142,
   142,   143,   144,   145,   147,   146,   148,   148,   149,   150,
   149,   151,   152,   152,   154,   153,   155,   155,   156,   156,
   157
};

static const short yyr2[] = {     0,
     2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     0,     1,     1,     1,
     1,     1,     1,     1,     0,     2,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     5,     1,     1,
     1,     1,     1,     0,     2,     0,     2,     1,     1,     1,
     3,     1,     2,     3,     1,     1,     0,     8,     0,     2,
     3,     1,     4,     4,     4,     4,     3,     0,     6,     0,
     8,     1,     1,     0,     2,     1,     3,     4,     4,     4,
     4,     2,     4,     4,     4,     2,     4,     2,     2,     4,
     4,     4,     4,     4,     2,     4,     1,     1,     1,     1,
     3,     4,     3,     4,     3,     2,     1,     4,     6,     1,
     1,     1,     1,     1,     6,     0,     7,     0,     4,     0,
     8,     1,     1,     0,     2,     4,     6,     2,     4,     2,
     4,     0,     6,     0,     8,     0,    10,     1,     1,     1,
     3,     4,     3,     4,     3,     2,     1,     0,     7,     0,
     2,     2,     1,     1,     0,     8,     0,     2,     4,     0,
     6,     1,     3,     1,     0,     8,     0,     2,     2,     1,
     6
};

static const short yydefact[] = {    17,
     0,     2,   140,   142,   141,    69,    70,    71,    72,    73,
    74,    75,    76,    77,    78,    79,    25,    80,     0,   103,
   107,   108,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   104,   105,   106,     1,   139,     0,
   137,     3,     4,     5,     6,    12,    11,     7,     8,     9,
    10,    13,    14,    15,    16,   144,   155,   156,   153,     0,
   213,   214,   212,    25,    25,    25,   172,   173,    25,    25,
   222,   223,   168,    25,   211,    25,    25,    25,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   210,    25,    25,    25,     0,    18,    19,    20,
    21,    22,    23,    24,    26,   248,   146,     0,   144,     0,
     0,     0,     0,   134,   136,   135,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    63,    67,    68,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    62,    64,    65,    66,   133,   152,
   167,     0,   144,   144,     0,     0,   144,     0,   144,     0,
     0,   145,   154,   157,   163,   164,   165,   166,     0,   144,
   255,   265,   216,   144,   170,   144,   208,   220,   143,     0,
   250,   148,   149,   150,   147,     0,   151,     0,     0,     0,
     0,     0,     0,     0,     0,   138,     0,   159,   169,   257,
   267,   215,     0,   271,   174,   209,   224,   249,   254,   251,
     0,     0,     0,     0,     0,     0,     0,   253,   252,   158,
   162,   160,   256,     0,     0,   258,   266,   270,     0,   268,
     0,   171,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   175,   176,   221,     0,     0,   225,     0,   262,   260,
     0,   269,   218,   200,   188,   199,   198,     0,     0,     0,
     0,   182,   197,     0,     0,     0,   186,     0,   189,     0,
     0,     0,     0,     0,   195,     0,     0,   239,   238,   232,
   230,   228,     0,   161,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   207,   177,     0,     0,     0,     0,     0,   257,
   264,   259,     0,   217,   178,   179,   180,   181,   183,   184,
   185,   187,   190,   191,   192,   193,   194,   196,   206,     0,
     0,     0,   240,   234,   224,     0,   247,   231,   229,   226,
     0,     0,     0,   205,     0,   201,     0,   203,     0,     0,
     0,   246,     0,     0,     0,     0,   261,   263,   219,   202,
   204,   236,   224,   233,   245,     0,   241,     0,   243,   227,
     0,     0,   242,   244,   224,   235,     0,   237,     0,     0
};

static const short yydefgoto[] = {     1,
    48,     2,   125,    66,   179,    49,   113,   294,    50,    51,
   210,   126,   127,   192,   215,   181,    52,    69,    70,    53,
   216,   242,   252,    54,    55,    56,    57,   182,    58,   223,
   114,   246,   282,   283,   304,   298,   295,   344,    59,   115,
    60,   221,   327,    61,   225,   116,   247,   287,   346,   390,
   411,   320,   374,   378,    62,   191,   227,   240,   249,   241,
    63,   219,   243,   256,   325,   290,   352,    64,   220,   244,
   260,    65
};

static const short yypact[] = {-32768,
   506,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,     1,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   174,
   -74,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,    74,-32768,-32768,-32768,   -72,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1001,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   -58,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,     1,    74,   443,
   443,   443,   443,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   -60,    16,    74,    74,    -9,    22,    74,   380,    74,  1001,
    18,   311,-32768,-32768,   -60,   -60,   -60,   -60,  1001,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   -60,-32768,-32768,   -49,
-32768,-32768,-32768,-32768,-32768,    34,-32768,    84,    39,    59,
   860,    87,    90,    92,    97,-32768,   907,-32768,-32768,-32768,
-32768,-32768,    37,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   103,   954,   -12,    -1,    98,   230,   -15,-32768,-32768,-32768,
-32768,    41,-32768,  1001,  1001,-32768,-32768,-32768,  1001,-32768,
   109,-32768,  1001,    58,    58,    58,    58,  1001,  1001,    58,
    58,  1001,    58,  1001,    58,    58,    58,    58,    58,  1001,
    58,-32768,    46,-32768,    85,    11,-32768,  1001,-32768,-32768,
    47,-32768,-32768,-32768,-32768,-32768,-32768,    48,    50,    51,
    52,-32768,-32768,    53,    57,    60,-32768,    61,-32768,    73,
    75,    76,    78,    79,-32768,    80,   553,-32768,-32768,    82,
    83,    86,    88,-32768,   118,  1001,    14,  1001,  1001,  1001,
  1001,  1001,  1001,  1001,  1001,  1001,  1001,  1001,  1001,  1001,
  1001,  1001,-32768,   -62,  1001,   122,   604,   604,  1001,-32768,
-32768,    91,    93,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1001,
   655,   706,-32768,    95,-32768,  1001,-32768,   -44,   -44,    96,
    -4,  1001,   125,-32768,  1001,-32768,  1001,-32768,   604,   138,
   -13,-32768,  1001,   757,   808,   604,-32768,-32768,-32768,-32768,
-32768,   -44,-32768,-32768,-32768,  1001,-32768,  1001,-32768,   -44,
   145,    54,-32768,-32768,-32768,-32768,    81,-32768,   166,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,    38,-32768,-32768,-32768,   -83,-32768,-32768,
-32768,  -128,-32768,-32768,-32768,  -119,-32768,-32768,    55,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   108,  -249,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  -373,-32768,-32768,-32768,
-32768,  -117,  -182,  -345,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  -176,-32768,-32768,   -76,-32768,-32768,-32768,-32768,
-32768,-32768
};


#define	YYLAST		1062


static const short yytable[] = {   180,
   194,   391,   379,   284,   117,   404,   253,   370,   203,   128,
   195,   196,   197,   198,   397,    67,    68,   257,   302,   371,
   372,   190,   307,   199,   309,   393,   318,   319,   353,   412,
   315,   226,   354,   200,   285,   211,   285,   394,   395,   204,
   286,   417,   286,   402,   254,   255,   180,   180,   180,   180,
   410,   228,   254,   255,   201,   202,   230,   258,   205,   259,
   208,   118,   119,   120,   121,   122,   123,   124,   207,   321,
   322,   218,   416,   296,   297,   222,   231,   224,   355,   356,
   357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
   367,   368,   118,   119,   120,   121,   122,   123,   124,   418,
   318,   319,   229,   285,   180,   234,   209,   235,   214,   286,
   236,   129,   130,   131,   237,   217,   132,   133,   245,   248,
   261,   183,   288,   184,   185,   186,   293,   317,   326,   328,
   285,   329,   330,   331,   332,   350,   286,   233,   333,   375,
   399,   334,   335,   239,   118,   119,   120,   121,   122,   123,
   124,   187,   188,   189,   336,   403,   337,   338,   251,   339,
   340,   341,   415,   345,   347,   420,   380,   348,   323,   349,
   289,   289,   382,   381,   383,   292,   389,   396,   291,     0,
     0,     0,   193,     0,     0,   303,     0,     0,    71,    72,
    73,     0,     0,    74,    75,    76,    77,    78,    79,    80,
    81,    82,     0,    83,   324,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   343,   112,     0,     0,     0,     0,     0,
     0,     0,   351,     0,     0,     0,     0,     0,   262,     0,
     0,     0,     0,     0,     0,   263,     0,     0,   369,     0,
     0,   373,     0,   377,   377,   373,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,     0,
   277,   278,   279,   280,   281,     0,   384,   386,   388,     0,
     0,     0,   392,     0,     0,     0,     0,     0,   398,     0,
     0,   400,     0,   401,     0,   377,     0,     0,     0,   405,
   407,   409,   377,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   413,     0,   414,   134,   135,   136,     0,     0,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
   177,   178,   299,   300,   301,     0,     0,   305,   306,     0,
   308,     0,   310,   311,   312,   313,   314,     0,   316,     0,
     0,     0,   212,   213,   134,   135,   136,   206,     0,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
   168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
   178,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   118,   119,   120,   121,   122,   123,   124,   134,   135,   136,
     0,     0,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
   165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
   175,   176,   177,   178,     0,   419,     0,     0,     0,     0,
     0,     0,     0,   118,   119,   120,   121,   122,   123,   124,
     3,     4,     5,     0,     0,     6,     7,     8,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,   134,   135,   136,
     0,     0,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
   165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
   175,   176,   177,   178,     0,     0,     0,     0,   134,   135,
   136,     0,   342,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
   164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
   174,   175,   176,   177,   178,     0,     0,     0,     0,   134,
   135,   136,     0,   376,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
   173,   174,   175,   176,   177,   178,     0,     0,     0,     0,
   134,   135,   136,     0,   385,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
   172,   173,   174,   175,   176,   177,   178,     0,     0,     0,
     0,   134,   135,   136,     0,   387,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
   171,   172,   173,   174,   175,   176,   177,   178,     0,     0,
     0,     0,   134,   135,   136,     0,   406,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
   160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
   170,   171,   172,   173,   174,   175,   176,   177,   178,     0,
     0,     0,     0,     0,   134,   135,   136,   408,   232,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
   168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
   178,   134,   135,   136,     0,   238,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
   171,   172,   173,   174,   175,   176,   177,   178,   134,   135,
   136,     0,   250,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
   164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
   174,   175,   176,   177,   178,   134,   135,   136,     0,     0,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
   177,   178
};

static const short yycheck[] = {    83,
   129,   375,   348,    19,    79,    19,    19,    70,    18,    82,
   130,   131,   132,   133,    19,    15,    16,    19,   268,    82,
    83,    80,   272,    84,   274,    70,    16,    17,    15,   403,
   280,    81,    19,    18,    50,    18,    50,    82,    83,    18,
    56,   415,    56,   389,    57,    58,   130,   131,   132,   133,
   396,    18,    57,    58,   183,   184,    18,    59,   187,    61,
   189,    71,    72,    73,    74,    75,    76,    77,   188,    59,
    60,   200,    19,    16,    17,   204,    18,   206,   328,   329,
   330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
   340,   341,    71,    72,    73,    74,    75,    76,    77,    19,
    16,    17,    19,    50,   188,    19,   190,    18,   192,    56,
    19,    74,    75,    76,    18,   199,    79,    80,    82,    17,
    23,    84,    82,    86,    87,    88,    18,    82,    82,    82,
    50,    82,    82,    82,    82,    18,    56,   221,    82,    18,
    16,    82,    82,   227,    71,    72,    73,    74,    75,    76,
    77,   114,   115,   116,    82,    18,    82,    82,   242,    82,
    82,    82,    18,    82,    82,     0,   349,    82,   286,    82,
   254,   255,    82,   350,    82,   259,    82,    82,   255,    -1,
    -1,    -1,   128,    -1,    -1,   269,    -1,    -1,    15,    16,
    17,    -1,    -1,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    -1,    30,   288,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,   317,    61,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   326,    -1,    -1,    -1,    -1,    -1,    19,    -1,
    -1,    -1,    -1,    -1,    -1,    26,    -1,    -1,   342,    -1,
    -1,   345,    -1,   347,   348,   349,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    -1,
    51,    52,    53,    54,    55,    -1,   370,   371,   372,    -1,
    -1,    -1,   376,    -1,    -1,    -1,    -1,    -1,   382,    -1,
    -1,   385,    -1,   387,    -1,   389,    -1,    -1,    -1,   393,
   394,   395,   396,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   406,    -1,   408,    15,    16,    17,    -1,    -1,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,   265,   266,   267,    -1,    -1,   270,   271,    -1,
   273,    -1,   275,   276,   277,   278,   279,    -1,   281,    -1,
    -1,    -1,    82,    83,    15,    16,    17,    18,    -1,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    71,    72,    73,    74,    75,    76,    77,    15,    16,    17,
    -1,    -1,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    -1,     0,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    71,    72,    73,    74,    75,    76,    77,
    15,    16,    17,    -1,    -1,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    15,    16,    17,
    -1,    -1,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    -1,    -1,    -1,    -1,    15,    16,
    17,    -1,    70,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    -1,    -1,    -1,    -1,    15,
    16,    17,    -1,    70,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    -1,    -1,    -1,    -1,
    15,    16,    17,    -1,    70,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    -1,    -1,    -1,
    -1,    15,    16,    17,    -1,    70,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    -1,    -1,
    -1,    -1,    15,    16,    17,    -1,    70,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    -1,
    -1,    -1,    -1,    -1,    15,    16,    17,    70,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    15,    16,    17,    -1,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    15,    16,
    17,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    15,    16,    17,    -1,    -1,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"
/* Skeleton output parser for bison,
Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
Bison output file, you may use that output file without restriction.
This special exception was added by the Free Software Foundation
in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
#pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
	void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
when the %semantic_parser declaration is not specified in the grammar.
It was written by Richard Stallman by simplifying the hairy parser
used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
It is replaced by the list of actions, each action
as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
This remains here temporarily to ease the
transition to the new meaning of YYERROR, for GCC.
Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
	do								\
	if (yychar == YYEMPTY && yylen == 1)				\
{ yychar = (token), yylval = (value);			\
	yychar1 = YYTRANSLATE (yychar);				\
	YYPOPSTACK;						\
	goto yybackup;						\
}								\
  else								\
{ yyerror ("syntax error: cannot back up"); YYERROR; }	\
	while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
(effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
in available built-in functions on various systems.  */
static void
	__yy_memcpy (from, to, count)
	char *from;
char *to;
int count;
{
	register char *f = from;
	register char *t = to;
	register int i = count;

	while (i-- > 0)
		*t++ = *f++;
}

#else /* __cplusplus */
/* This is the most reliable way to avoid incompatibilities
in available built-in functions on various systems.  */
static void
	__yy_memcpy (char *from, char *to, int count)
{
	register char *f = from;
	register char *t = to;
	register int i = count;

	while (i-- > 0)
		*t++ = *f++;
}
#endif
#endif
#line 192 "bison.simple"
/* The user can define YYPARSE_PARAM as the name of an argument to be passed
into yyparse.  The argument should have type void *.
It should actually point to an object.
Grammar actions can access the variable by casting it
to the proper pointer type.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL
# else
#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
# endif
#else /* !YYPARSE_PARAM */
# define YYPARSE_PARAM_ARG
# define YYPARSE_PARAM_DECL
#endif /* !YYPARSE_PARAM */

int
	yyparse(YYPARSE_PARAM_ARG)
	YYPARSE_PARAM_DECL
{
	register int yystate;
	register int yyn;
	register short *yyssp;
	register YYSTYPE *yyvsp;
	int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
	int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

	short	yyssa[YYINITDEPTH];	/*  the state stack			*/
	YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

	short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
	YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
	YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
	YYLTYPE *yyls = yylsa;
	YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

	int yystacksize = YYINITDEPTH;

#ifdef YYPURE
	int yychar;
	YYSTYPE yylval;
	int yynerrs;
#ifdef YYLSP_NEEDED
	YYLTYPE yylloc;
#endif
#endif

	YYSTYPE yyval;		/*  the variable used to return		*/
	/*  semantic values from the action	*/
	/*  routines				*/

	int yylen;

#if YYDEBUG != 0
	if (yydebug)
		fprintf(stderr, "Starting parse\n");
#endif

	yystate = 0;
	yyerrstatus = 0;
	yynerrs = 0;
	yychar = YYEMPTY;		/* Cause a token to be read.  */

	/* Initialize stack pointers.
	Waste one element of value and location stack
	so that they stay on the same level as the state stack.
	The wasted elements are never initialized.  */

	yyssp = yyss - 1;
	yyvsp = yyvs;
#ifdef YYLSP_NEEDED
	yylsp = yyls;
#endif

	/* Push a new state, which is found in  yystate  .  */
	/* In all cases, when you get here, the value and location stacks
	have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

	*++yyssp = yystate;

	if (yyssp >= yyss + yystacksize - 1)
	{
		/* Give user a chance to reallocate the stack */
		/* Use copies of these so that the &'s don't force the real ones into memory. */
		YYSTYPE *yyvs1 = yyvs;
		short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
		YYLTYPE *yyls1 = yyls;
#endif

		/* Get the current used size of the three stacks, in elements.  */
		int size = yyssp - yyss + 1;

#ifdef yyoverflow
		/* Each stack pointer address is followed by the size of
		the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
		/* This used to be a conditional around just the two extra args,
		but that might be undefined if yyoverflow is a macro.  */
		yyoverflow("parser stack overflow",
			&yyss1, size * sizeof (*yyssp),
			&yyvs1, size * sizeof (*yyvsp),
			&yyls1, size * sizeof (*yylsp),
			&yystacksize);
#else
		yyoverflow("parser stack overflow",
			&yyss1, size * sizeof (*yyssp),
			&yyvs1, size * sizeof (*yyvsp),
			&yystacksize);
#endif

		yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
		yyls = yyls1;
#endif
#else /* no yyoverflow */
		/* Extend the stack our own way.  */
		if (yystacksize >= YYMAXDEPTH)
		{
			yyerror("parser stack overflow");
			return 2;
		}
		yystacksize *= 2;
		if (yystacksize > YYMAXDEPTH)
			yystacksize = YYMAXDEPTH;
		yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
		__yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
		yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
		__yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
		yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
		__yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

		yyssp = yyss + size - 1;
		yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
		yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
		if (yydebug)
			fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

		if (yyssp >= yyss + yystacksize - 1)
			YYABORT;
	}

#if YYDEBUG != 0
	if (yydebug)
		fprintf(stderr, "Entering state %d\n", yystate);
#endif

	goto yybackup;
yybackup:

	/* Do appropriate processing given the current state.  */
	/* Read a lookahead token if we need one and don't already have one.  */
	/* yyresume: */

	/* First try to decide what to do without reference to lookahead token.  */
	yyn = yypact[yystate];
	if (yyn == YYFLAG)
		goto yydefault;

	/* Not known => get a lookahead token if don't already have one.  */

	/* yychar is either YYEMPTY or YYEOF
	or a valid token in external form.  */

	if (yychar == YYEMPTY)
	{
#if YYDEBUG != 0
		if (yydebug)
			fprintf(stderr, "Reading a token: ");
#endif
		yychar = YYLEX;
	}

	/* Convert token to internal form (in yychar1) for indexing tables with */

	if (yychar <= 0)		/* This means end of input. */
	{
		yychar1 = 0;
		yychar = YYEOF;		/* Don't call YYLEX any more */
#if YYDEBUG != 0
		if (yydebug)
			fprintf(stderr, "Now at end of input.\n");
#endif
	}
	else
	{
		yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
		if (yydebug)
		{
			fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
			/* Give the individual parser a way to print the precise meaning
			of a token, for further debugging info.  */
#ifdef YYPRINT
			YYPRINT (stderr, yychar, yylval);
#endif
			fprintf (stderr, ")\n");
		}
#endif
	}

	yyn += yychar1;
	if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
		goto yydefault;

	yyn = yytable[yyn];

	/* yyn is what to do for this token type in this state.
	Negative => reduce, -yyn is rule number.
	Positive => shift, yyn is new state.
	New state is final state => don't bother to shift,
	just return success.
	0, or most negative number => error.  */

	if (yyn < 0)
	{
		if (yyn == YYFLAG)
			goto yyerrlab;
		yyn = -yyn;
		goto yyreduce;
	}
	else if (yyn == 0)
		goto yyerrlab;

	if (yyn == YYFINAL)
		YYACCEPT;

	/* Shift the lookahead token.  */
#if YYDEBUG != 0
	if (yydebug)
		fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

	/* Discard the token being shifted unless it is eof.  */
	if (yychar != YYEOF)
		yychar = YYEMPTY;

	*++yyvsp = yylval;
#ifdef YYLSP_NEEDED
	*++yylsp = yylloc;
#endif

	/* count tokens shifted since error; after three, turn off error status.  */
	if (yyerrstatus) yyerrstatus--;

	yystate = yyn;
	goto yynewstate;

	/* Do the default action for the current state.  */
yydefault:
	yyn = yydefact[yystate];
	if (yyn == 0)
		goto yyerrlab;

	/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
	yylen = yyr2[yyn];
	if (yylen > 0)
		yyval = yyvsp[1-yylen]; /* implement default value of the action */
#if YYDEBUG != 0
	if (yydebug)
	{
		int i;

		fprintf (stderr, "Reducing via rule %d (line %d), ",
			yyn, yyrline[yyn]);

		/* Print the symbols being reduced, and their result.  */
		for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
			fprintf (stderr, "%s ", yytname[yyrhs[i]]);
		fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
	}
#endif
	
  switch (yyn) {

case 139:
#line 156 "grammar.ypp"
{ state->resourceName = yytext; ;
    break;}
case 140:
#line 158 "grammar.ypp"
{ state->resourceName = yytext; ;
    break;}
case 141:
#line 160 "grammar.ypp"
{ state->resourceName = yytext; ;
    break;}
case 142:
#line 162 "grammar.ypp"
{ state->resourceName = yytext; ;
    break;}
case 143:
#line 167 "grammar.ypp"
{
		  state->resourceName += L"$(";
		  state->resourceName += yytext;
		  state->resourceName += L")";
		;
    break;}
case 144:
#line 176 "grammar.ypp"
{ state->resourceOptions = L""; ;
    break;}
case 148:
#line 187 "grammar.ypp"
{
			state->resourceOptions += L", ";
		;
    break;}
case 149:
#line 191 "grammar.ypp"
{
			state->resourceOptions += L"| ";
		;
    break;}
case 150:
#line 195 "grammar.ypp"
{
			state->resourceOptions += yytext;
			state->resourceOptions += L" ";
		;
    break;}
case 151:
#line 203 "grammar.ypp"
{
			state->resourceOptions += L".";
			state->resourceOptions += yytext;
		;
    break;}
case 152:
#line 208 "grammar.ypp"
{
			state->resourceOptions = yytext;
		;
    break;}
case 157:
#line 236 "grammar.ypp"
{
			Accelerators_C *pRes = new Accelerators_C(state->resourceName.c_str(), state->resourceOptions.c_str());
			state->resource = pRes;
			state->rc->AddResource(pRes);
		;
    break;}
case 160:
#line 249 "grammar.ypp"
{
			Accelerators_C *pRes = (Accelerators_C*)state->resource;
			pRes->AddAccelerator(state->resourceItem.c_str());
		;
    break;}
case 161:
#line 257 "grammar.ypp"
{
		    state->resourceItem += L",";
		    state->resourceItem += yytext;
		;
    break;}
case 162:
#line 262 "grammar.ypp"
{
		    state->resourceItem = yytext;
		;
    break;}
case 163:
#line 273 "grammar.ypp"
{
			Bitmap_C *pRes = new Bitmap_C(state->resourceName.c_str(), state->resourceOptions.c_str());
			state->resource = pRes;
			state->rc->AddResource(pRes);
		;
    break;}
case 164:
#line 286 "grammar.ypp"
{
			Cursor_C *pRes = new Cursor_C(state->resourceName.c_str(), state->resourceOptions.c_str());
			state->resource = pRes;
			state->rc->AddResource(pRes);
		;
    break;}
case 165:
#line 299 "grammar.ypp"
{
			Font_C *pRes = new Font_C(state->resourceName.c_str(), state->resourceOptions.c_str());
			state->resource = pRes;
			state->rc->AddResource(pRes);
		;
    break;}
case 166:
#line 312 "grammar.ypp"
{
			Icon_C *pRes = new Icon_C(state->resourceName.c_str(), state->resourceOptions.c_str());
			state->resource = pRes;
			state->rc->AddResource(pRes);
		;
    break;}
case 167:
#line 325 "grammar.ypp"
{
			RCData_C *pRes = new RCData_C(state->resourceName.c_str());
			pRes->SetFileName(state->resourceOptions.c_str());
			state->resource = pRes;
			state->rc->AddResource(pRes);
		;
    break;}
case 168:
#line 332 "grammar.ypp"
{
			RCData_C *pRes = new RCData_C(state->resourceName.c_str());
			pRes->SetOptions(state->resourceOptions.c_str());
			state->resource = pRes;
			state->rc->AddResource(pRes);
		;
    break;}
case 169:
#line 339 "grammar.ypp"
{
			RCData_C *pRes = (RCData_C*)state->resource;
			pRes->SetRawData(state->resourceOptions.c_str());
		;
    break;}
case 170:
#line 351 "grammar.ypp"
{
			Dialog_C *pRes = new Dialog_C(state->resourceName.c_str(), state->resourceType.c_str(), state->resourceOptions.c_str());
			state->resource = pRes;
			state->rc->AddResource(pRes);
		;
    break;}
case 172:
#line 363 "grammar.ypp"
{
		    state->resourceType = L"DIALOG";
		;
    break;}
case 173:
#line 367 "grammar.ypp"
{
		    state->resourceType = L"DIALOGEX";
		;
    break;}
case 175:
#line 375 "grammar.ypp"
{
			Control_C *pCtrl = new Control_C(state->controlType.c_str(), state->controlText.c_str(), state->controlID.c_str(), state->controlOptions.c_str());
			Dialog_C *pRes = (Dialog_C*)state->resource;
			pRes->AddControl(pCtrl);
		;
    break;}
case 176:
#line 384 "grammar.ypp"
{
		    state->resourceItem += L",";
		    state->resourceItem += yytext;
		;
    break;}
case 177:
#line 389 "grammar.ypp"
{
		    state->resourceItem += L",";
		    state->resourceItem += yytext;
		;
    break;}
case 178:
#line 397 "grammar.ypp"
{ state->controlType = L"AUTO3STATE"; ;
    break;}
case 179:
#line 399 "grammar.ypp"
{ state->controlType = L"AUTOCHECKBOX"; ;
    break;}
case 180:
#line 401 "grammar.ypp"
{ state->controlType = L"AUTORADIOBUTTON"; ;
    break;}
case 181:
#line 403 "grammar.ypp"
{ state->controlType = L"CHECKBOX"; ;
    break;}
case 182:
#line 405 "grammar.ypp"
{ state->controlType = L"COMBOBOX"; state->controlText = L""; ;
    break;}
case 183:
#line 407 "grammar.ypp"
{ state->controlType = L"CONTROL"; ;
    break;}
case 184:
#line 409 "grammar.ypp"
{ state->controlType = L"CTEXT"; ;
    break;}
case 185:
#line 411 "grammar.ypp"
{ state->controlType = L"DEFPUSHBUTTON"; ;
    break;}
case 186:
#line 413 "grammar.ypp"
{ state->controlType = L"EDITTEXT"; state->controlText = L""; ;
    break;}
case 187:
#line 415 "grammar.ypp"
{ state->controlType = L"GROUPBOX"; ;
    break;}
case 188:
#line 417 "grammar.ypp"
{ state->controlType = L"ICON"; state->controlText = L""; ;
    break;}
case 189:
#line 419 "grammar.ypp"
{ state->controlType = L"LISTBOX"; state->controlText = L""; ;
    break;}
case 190:
#line 421 "grammar.ypp"
{ state->controlType = L"LTEXT"; ;
    break;}
case 191:
#line 423 "grammar.ypp"
{ state->controlType = L"PUSHBOX"; ;
    break;}
case 192:
#line 425 "grammar.ypp"
{ state->controlType = L"PUSHBUTTON"; ;
    break;}
case 193:
#line 427 "grammar.ypp"
{ state->controlType = L"RADIOBUTTON"; ;
    break;}
case 194:
#line 429 "grammar.ypp"
{ state->controlType = L"RTEXT"; ;
    break;}
case 195:
#line 431 "grammar.ypp"
{ state->controlType = L"SCROLLBAR"; state->controlText = L""; ;
    break;}
case 196:
#line 433 "grammar.ypp"
{ state->controlType = L"STATE3"; ;
    break;}
case 197:
#line 438 "grammar.ypp"
{ state->controlText = yytext; ;
    break;}
case 198:
#line 443 "grammar.ypp"
{ state->controlText = yytext; ;
    break;}
case 199:
#line 445 "grammar.ypp"
{ state->controlText = yytext; ;
    break;}
case 200:
#line 450 "grammar.ypp"
{ state->controlID = yytext; ;
    break;}
case 201:
#line 455 "grammar.ypp"
{
		    state->controlOptions += L",";
		    state->controlOptions += yytext;
		;
    break;}
case 202:
#line 460 "grammar.ypp"
{
		    state->controlOptions += L", NOT";
		    state->controlOptions += yytext;
		;
    break;}
case 203:
#line 465 "grammar.ypp"
{
		    state->controlOptions += L"|";
		    state->controlOptions += yytext;
		;
    break;}
case 204:
#line 470 "grammar.ypp"
{
		    state->controlOptions += L"| NOT ";
		    state->controlOptions += yytext;
		;
    break;}
case 205:
#line 475 "grammar.ypp"
{
		    state->controlOptions += L" NOT ";
		    state->controlOptions += yytext;
		;
    break;}
case 206:
#line 480 "grammar.ypp"
{
		    state->controlOptions += L" NOT ";
		    state->controlOptions = yytext;
		;
    break;}
case 207:
#line 485 "grammar.ypp"
{
		    state->controlOptions = yytext;
		;
    break;}
case 208:
#line 496 "grammar.ypp"
{
			UserDef_C *pRes = new UserDef_C(state->resourceName.c_str(), state->resourceType.c_str());
			pRes->SetFileName(state->resourceOptions.c_str());
			state->resource = pRes;
			state->rc->AddResource(pRes);
		;
    break;}
case 209:
#line 503 "grammar.ypp"
{
			UserDef_C *pRes = new UserDef_C(state->resourceName.c_str(), state->resourceType.c_str());
			pRes->SetOptions(state->resourceOptions.c_str());
			state->resource = pRes;
			state->rc->AddResource(pRes);
		;
    break;}
case 210:
#line 513 "grammar.ypp"
{
		    state->resourceType = yytext;
		;
    break;}
case 211:
#line 517 "grammar.ypp"
{
		    state->resourceType = yytext;
		;
    break;}
case 212:
#line 521 "grammar.ypp"
{
		    state->resourceType = yytext;
		;
    break;}
case 213:
#line 525 "grammar.ypp"
{
		    state->resourceType = yytext;
		;
    break;}
case 214:
#line 529 "grammar.ypp"
{
		    state->resourceType = yytext;
		;
    break;}
case 220:
#line 565 "grammar.ypp"
{
			Menu_C *pRes = new Menu_C(state->resourceName.c_str(), state->resourceOptions.c_str());
			state->resource = pRes;
			state->popup = NULL;
			state->rc->AddResource(pRes);
		;
    break;}
case 226:
#line 588 "grammar.ypp"
{
			MenuItem_C *pItem = new MenuItem_C(state->controlText.c_str(), state->controlID.c_str(), L"");
			if (state->popup)
				state->popup->AddItem(pItem);
			else
				((Menu_C*)state->resource)->AddItem(pItem);
		;
    break;}
case 227:
#line 596 "grammar.ypp"
{
			MenuItem_C *pItem = new MenuItem_C(state->controlText.c_str(), state->controlID.c_str(), state->controlOptions.c_str());
			if (state->popup)
				state->popup->AddItem(pItem);
			else
				((Menu_C*)state->resource)->AddItem(pItem);
		;
    break;}
case 228:
#line 604 "grammar.ypp"
{
			MenuItem_C *pItem = new MenuItem_C(L"", L"MFT_SEPARATOR", L"");
			if (state->popup)
				state->popup->AddItem(pItem);
			else
				((Menu_C*)state->resource)->AddItem(pItem);
		;
    break;}
case 229:
#line 612 "grammar.ypp"
{
			MenuItem_C *pItem = new MenuItem_C(L"", L"MFT_SEPARATOR", state->controlOptions.c_str());
			if (state->popup)
				state->popup->AddItem(pItem);
			else
				((Menu_C*)state->resource)->AddItem(pItem);
		;
    break;}
case 230:
#line 620 "grammar.ypp"
{
			MenuItem_C *pItem = new MenuItem_C(L"", L"SEPARATOR", L"");
			if (state->popup)
				state->popup->AddItem(pItem);
			else
				((Menu_C*)state->resource)->AddItem(pItem);
		;
    break;}
case 231:
#line 628 "grammar.ypp"
{
			MenuItem_C *pItem = new MenuItem_C(L"", L"SEPARATOR", state->controlOptions.c_str());
			if (state->popup)
				state->popup->AddItem(pItem);
			else
				((Menu_C*)state->resource)->AddItem(pItem);
		;
    break;}
case 232:
#line 636 "grammar.ypp"
{
			MenuPopup_C *pPopup = new MenuPopup_C(state->popup, state->controlText.c_str(), L"", L"");
			if (state->popup)
				state->popup->AddItem(pPopup);
			else
				((Menu_C*)state->resource)->AddItem(pPopup);
			state->popup = pPopup;
		;
    break;}
case 233:
#line 647 "grammar.ypp"
{
			state->popup = state->popup->GetOwner();
		;
    break;}
case 234:
#line 651 "grammar.ypp"
{
			MenuPopup_C *pPopup = new MenuPopup_C(state->popup, state->controlText.c_str(), state->controlID.c_str(), L"");
			if (state->popup)
				state->popup->AddItem(pPopup);
			else
				((Menu_C*)state->resource)->AddItem(pPopup);
			state->popup = pPopup;
		;
    break;}
case 235:
#line 662 "grammar.ypp"
{
			state->popup = state->popup->GetOwner();
		;
    break;}
case 236:
#line 666 "grammar.ypp"
{
			MenuPopup_C *pPopup = new MenuPopup_C(state->popup, state->controlText.c_str(), state->controlID.c_str(), state->controlOptions.c_str());
			if (state->popup)
				state->popup->AddItem(pPopup);
			else
				((Menu_C*)state->resource)->AddItem(pPopup);
			state->popup = pPopup;
		;
    break;}
case 237:
#line 677 "grammar.ypp"
{
			state->popup = state->popup->GetOwner();
		;
    break;}
case 238:
#line 684 "grammar.ypp"
{ state->controlText = yytext; ;
    break;}
case 239:
#line 686 "grammar.ypp"
{ state->controlText = yytext; ;
    break;}
case 240:
#line 691 "grammar.ypp"
{ state->controlID = yytext; ;
    break;}
case 241:
#line 696 "grammar.ypp"
{
		    state->controlOptions += L",";
		    state->controlOptions += yytext;
		;
    break;}
case 242:
#line 701 "grammar.ypp"
{
		    state->controlOptions += L", NOT";
		    state->controlOptions += yytext;
		;
    break;}
case 243:
#line 706 "grammar.ypp"
{
		    state->controlOptions += L"|";
		    state->controlOptions += yytext;
		;
    break;}
case 244:
#line 711 "grammar.ypp"
{
		    state->controlOptions += L"| NOT ";
		    state->controlOptions += yytext;
		;
    break;}
case 245:
#line 716 "grammar.ypp"
{
		    state->controlOptions += L" NOT ";
		    state->controlOptions += yytext;
		;
    break;}
case 246:
#line 721 "grammar.ypp"
{
		    state->controlOptions += L" NOT ";
		    state->controlOptions = yytext;
		;
    break;}
case 247:
#line 726 "grammar.ypp"
{
		    state->controlOptions = yytext;
		;
    break;}
case 248:
#line 737 "grammar.ypp"
{
			if (state->stringtable == NULL) {
				StringTable_C *pRes = new StringTable_C(state->resourceOptions.c_str());
				state->stringtable = pRes;
				state->rc->AddResource(pRes);
			}
		;
    break;}
case 252:
#line 754 "grammar.ypp"
{
		String_C *pString = new String_C(state->controlID.c_str(), state->controlText.c_str());
		((StringTable_C*)state->stringtable)->AddString(pString);
	;
    break;}
case 253:
#line 761 "grammar.ypp"
{ state->controlText = yytext; ;
    break;}
case 254:
#line 766 "grammar.ypp"
{ state->controlID = yytext; ;
    break;}
case 255:
#line 775 "grammar.ypp"
{
			VersionInfo_C *pRes = new VersionInfo_C(state->resourceName.c_str(), state->resourceOptions.c_str());
			state->resource = pRes;
			state->infoblock = NULL;
			state->rc->AddResource(pRes);
		;
    break;}
case 259:
#line 793 "grammar.ypp"
{
			VersionInfoValue_C *pValue = new VersionInfoValue_C(state->controlID.c_str(), state->controlText.c_str());
			if (state->infoblock)
				state->infoblock->AddValue(pValue);
			else {
				yyerror("unexpected VALUE at this level");
				return -1;
			}
		;
    break;}
case 260:
#line 803 "grammar.ypp"
{
			VersionInfoBlock_C *pBlock = new VersionInfoBlock_C(state->infoblock, state->controlID.c_str());
			if (state->infoblock)
				state->infoblock->AddBlock(pBlock);
			else
				((VersionInfo_C*)state->resource)->AddBlock(pBlock);
			state->infoblock = pBlock;
		;
    break;}
case 261:
#line 814 "grammar.ypp"
{
			state->infoblock = state->infoblock->GetOwner();
		;
    break;}
case 262:
#line 821 "grammar.ypp"
{ state->controlID = yytext; ;
    break;}
case 263:
#line 826 "grammar.ypp"
{
		    state->controlText += L",";
		    state->controlText += yytext;
		;
    break;}
case 264:
#line 831 "grammar.ypp"
{
		    state->controlText = yytext;
		;
    break;}
case 265:
#line 842 "grammar.ypp"
{
			Toolbar_C *pRes = new Toolbar_C(state->resourceName.c_str(), state->resourceOptions.c_str());
			state->resource = pRes;
			state->rc->AddResource(pRes);
		;
    break;}
case 269:
#line 857 "grammar.ypp"
{
		std::wstring s;
		s += L"BUTTON ";
		s += yytext;
		((Toolbar_C*)state->resource)->AddItem(s.c_str());
	;
    break;}
case 270:
#line 864 "grammar.ypp"
{
		((Toolbar_C*)state->resource)->AddItem(L"SEPARATOR");
	;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"
		yyvsp -= yylen;
	yyssp -= yylen;
#ifdef YYLSP_NEEDED
	yylsp -= yylen;
#endif

#if YYDEBUG != 0
	if (yydebug)
	{
		short *ssp1 = yyss - 1;
		fprintf (stderr, "state stack now");
		while (ssp1 != yyssp)
			fprintf (stderr, " %d", *++ssp1);
		fprintf (stderr, "\n");
	}
#endif

	*++yyvsp = yyval;

#ifdef YYLSP_NEEDED
	yylsp++;
	if (yylen == 0)
	{
		yylsp->first_line = yylloc.first_line;
		yylsp->first_column = yylloc.first_column;
		yylsp->last_line = (yylsp-1)->last_line;
		yylsp->last_column = (yylsp-1)->last_column;
		yylsp->text = 0;
	}
	else
	{
		yylsp->last_line = (yylsp+yylen-1)->last_line;
		yylsp->last_column = (yylsp+yylen-1)->last_column;
	}
#endif

	/* Now "shift" the result of the reduction.
	Determine what state that goes to,
	based on the state we popped back to
	and the rule number reduced by.  */

	yyn = yyr1[yyn];

	yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
	if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
		yystate = yytable[yystate];
	else
		yystate = yydefgoto[yyn - YYNTBASE];

	goto yynewstate;

yyerrlab:   /* here on detecting error */

	if (! yyerrstatus)
		/* If not already recovering from an error, report this error.  */
	{
		++yynerrs;

#ifdef YYERROR_VERBOSE
		yyn = yypact[yystate];

		if (yyn > YYFLAG && yyn < YYLAST)
		{
			int size = 0;
			char *msg;
			int x, count;

			count = 0;
			/* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
			for (x = (yyn < 0 ? -yyn : 0);
				x < (sizeof(yytname) / sizeof(char *)); x++)
				if (yycheck[x + yyn] == x)
					size += strlen(yytname[x]) + 15, count++;
			msg = (char *) malloc(size + 15);
			if (msg != 0)
			{
				strcpy(msg, "parse error");

				if (count < 5)
				{
					count = 0;
					for (x = (yyn < 0 ? -yyn : 0);
						x < (sizeof(yytname) / sizeof(char *)); x++)
						if (yycheck[x + yyn] == x)
						{
							strcat(msg, count == 0 ? ", expecting `" : " or `");
							strcat(msg, yytname[x]);
							strcat(msg, "'");
							count++;
						}
				}
				yyerror(msg);
				free(msg);
			}
			else
				yyerror ("parse error; also virtual memory exceeded");
		}
		else
#endif /* YYERROR_VERBOSE */
			yyerror("parse error");
	}

	goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

	if (yyerrstatus == 3)
	{
		/* if just tried and failed to reuse lookahead token after an error, discard it.  */

		/* return failure if at end of input */
		if (yychar == YYEOF)
			YYABORT;

#if YYDEBUG != 0
		if (yydebug)
			fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

		yychar = YYEMPTY;
	}

	/* Else will try to reuse lookahead token
	after shifting the error token.  */

	yyerrstatus = 3;		/* Each real token shifted decrements this */

	goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
	/* This is wrong; only states that explicitly want error tokens
	should shift them.  */
	yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
	if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

	if (yyssp == yyss) YYABORT;
	yyvsp--;
	yystate = *--yyssp;
#ifdef YYLSP_NEEDED
	yylsp--;
#endif

#if YYDEBUG != 0
	if (yydebug)
	{
		short *ssp1 = yyss - 1;
		fprintf (stderr, "Error: state stack now");
		while (ssp1 != yyssp)
			fprintf (stderr, " %d", *++ssp1);
		fprintf (stderr, "\n");
	}
#endif

yyerrhandle:

	yyn = yypact[yystate];
	if (yyn == YYFLAG)
		goto yyerrdefault;

	yyn += YYTERROR;
	if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
		goto yyerrdefault;

	yyn = yytable[yyn];
	if (yyn < 0)
	{
		if (yyn == YYFLAG)
			goto yyerrpop;
		yyn = -yyn;
		goto yyreduce;
	}
	else if (yyn == 0)
		goto yyerrpop;

	if (yyn == YYFINAL)
		YYACCEPT;

#if YYDEBUG != 0
	if (yydebug)
		fprintf(stderr, "Shifting error token, ");
#endif

	*++yyvsp = yylval;
#ifdef YYLSP_NEEDED
	*++yylsp = yylloc;
#endif

	yystate = yyn;
	goto yynewstate;
}
#line 881 "grammar.ypp"

